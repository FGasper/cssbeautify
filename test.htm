<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>Test Suite for CSS Beautify</title>
<link rel="stylesheet" type="text/css" href="style.css"/>
<script src="cssbeautify.js" charset="utf-8"></script>
<style>
pre {
    margin-left: 20px;
    padding: 5px;
    display: block;
    width: 500px;
}

.source {
    background-color: #ddd;
}

.ref {
    border: 1px solid blue;
}

.result {
    border: 1px solid red;
}

.fail {
    color: red;
}

.container .options {
    margin-left: 20px;
    float: none;
}
.container .options:before {
    content: "Options: ";
}
</style>
</head>
<body>

<div class="container">

<h1>Test Suite <small>for CSS Beautify</small></h1>

<!--
Every test data consists of a pair of pre with matching ids.
The test has the 'source' class and the baseline/reference has the 'ref' class.
-->

<p id="result">Running the tests...</p>

<h2>Simple style</h2>

<pre id="simple" class="status"></pre>

<pre id="simple" class="source">
menu { color: blue; }

box { border-radius: 4px; background-color: red }

a { color: green }
b { color: red }
</pre>

<p>Baseline reference</p>

<pre id="simple" class="ref">
menu {
    color: blue;
}

box {
    border-radius: 4px;
    background-color: red
}

a {
    color: green
}

b {
    color: red
}
</pre>

<h2>Block comment</h2>

<pre id="comment" class="status"></pre>

<pre id="comment" class="source">
/* line comment */
navigation { color: blue }

menu {
    /* line comment inside */
    border: 2px
}

/* block
 comment */
sidebar { color: red }

invisible {
    /* block
     * comment
     * inside */
    color: #eee
}
</pre>

<p>Baseline reference</p>

<pre id="comment" class="ref">
/* line comment */
navigation {
    color: blue
}

menu {
    /* line comment inside */
    border: 2px
}

/* block
 comment */
sidebar {
    color: red
}

invisible {
    /* block
     * comment
     * inside */
    color: #eee
}
</pre>

<h2>Indentation</h2>

<pre id="indent" class="status"></pre>

<pre id="indent" class="source">
     navigation {
    color: blue
  }
</pre>

<p>Baseline reference</p>

<pre id="indent" class="ref">
navigation {
    color: blue
}
</pre>

<h2>Blank lines and spaces</h2>

<pre id="spaces" class="status"></pre>

<pre id="spaces" class="source">
/* only one blank line between */
menu { color: red }




navi { color: black }

/* automatically insert a blank line */
button { border: 1px } sidebar { color: #ffe }

/* always whitespace before { */
hidden{opacity:0%}

/* no blank lines inside ruleset */
imprint {
  color: blue;


    opacity: 0.5;

   font-size: small
}

/* before colon: no space, after colon: one space only */
footer {
      font-family:     Arial;

  float   :right;
  }
</pre>

<p>Baseline reference</p>

<pre id="spaces" class="ref">
/* only one blank line between */
menu {
    color: red
}

navi {
    color: black
}

/* automatically insert a blank line */
button {
    border: 1px
}

sidebar {
    color: #ffe
}

/* always whitespace before { */
hidden {
    opacity: 0%
}

/* no blank lines inside ruleset */
imprint {
    color: blue;
    opacity: 0.5;
    font-size: small
}

/* before colon: no space, after colon: one space only */
footer {
    font-family: Arial;
    float: right;
}
</pre>

<h2>Quoted string</h2>

<pre id="string" class="status"></pre>

<pre id="string" class="source">
nav:after{content:'}'}
nav:before{content:"}"}
</pre>

<p>Baseline reference</p>

<pre id="string" class="ref">
nav:after {
    content: '}'
}

nav:before {
    content: "}"
}
</pre>

<h2>Selectors</h2>

<pre id="selector" class="status"></pre>

<pre id="selector" class="source">
* { border: 0px solid blue; }
div[class="{}"] { color: red; }
a[id="\"foo"] { padding: 0; }
#menu, #nav, #footer { color: royalblue; }
</pre>

<p>Baseline reference</p>

<pre id="selector" class="ref">
* {
    border: 0px solid blue;
}

div[class="{}"] {
    color: red;
}

a[id="\"foo"] {
    padding: 0;
}

#menu, #nav, #footer {
    color: royalblue;
}
</pre>

<h2>@import directive</h2>

<pre id="import" class="status"></pre>

<pre id="import" class="source">
menu{background-color:red} @import url('foobar.css') screen;
nav{margin:0}
</pre>

<p>Baseline reference</p>

<pre id="import" class="ref">
menu {
    background-color: red
}

@import url('foobar.css') screen;

nav {
    margin: 0
}
</pre>

<h2>@media directive</h2>

<pre id="media" class="status"></pre>

<pre id="media" class="source">
@import "subs.css";
@import "print-main.css" print;
@media print {
  body { font-size: 10pt }
  nav { color: blue; }
}
h1 {color: red; }
</pre>

<p>Baseline reference</p>

<pre id="media" class="ref">
@import "subs.css";

@import "print-main.css" print;

@media print {
    body {
        font-size: 10pt
    }

    nav {
        color: blue;
    }
}

h1 {
    color: red;
}

</pre>

<h2>Animation keyframes</h2>

<pre id="keyframes" class="status"></pre>

<pre id="keyframes" class="source">
@-webkit-keyframes anim {
0% { -webkit-transform: translate3d(0px, 0px, 0px); }
100% { -webkit-transform: translate3d(150px, 0px, 0px) }}
</pre>

<p>Baseline reference</p>

<pre id="keyframes" class="ref">
@-webkit-keyframes anim {
    0% {
        -webkit-transform: translate3d(0px, 0px, 0px);
    }

    100% {
        -webkit-transform: translate3d(150px, 0px, 0px)
    }
}
</pre>

<h2>Newlines between selectors (optional)</h2>

<pre id="selectornewlines" class="options">
{ oneselectorperline: true }
</pre>

<pre id="selectornewlines" class="status"></pre>

<pre id="selectornewlines" class="source">
foo, html bar, this.that:not(#these) {
    color: blue;
}
</pre>

<pre id="selectornewlines" class="ref">
foo,
html bar,
this.that:not(#these) {
    color: blue;
}
</pre>

</div>

<script>
var total = 0, failures = 0, data = {},
    list, i, e, id, cls, name, test;

// Convert into a set of test fixture.
list = document.getElementsByTagName('pre');
for (i = 0; i < list.length; i += 1) {
    e = list[i];
    id = e.id;
    cls = e.getAttribute('class');
    if (typeof id === 'string' && id.length > 0) {
        if (!data[id]) { data[id] = {}; }

        if (cls === 'source') {
          data[id].source = e.innerHTML;
        }
        if (cls === 'ref') {
          data[id].ref = e.innerHTML.replace(/^\s+/, '').replace(/\s+$/, '');
        }
        if (cls === 'status') {
          data[id].status = e;
        }
        if (cls === 'options') {
          eval( "data[id].options = " + e.innerHTML );
        }
    }
}

// Go through all the fixture and create the formatted version.
for (name in data) {
    if (data.hasOwnProperty(name)) {
        total += 1;
        test = data[name];

        var args = [test.source];
        if ( test.options ) {
            args.push( test.options );
        }

        test.result = cssbeautify.apply(this,args).replace(/^\s+/, '').replace(/\s+$/, '');
        if (test.result !== test.ref) {
            failures += 1;
            e = document.createElement('pre');
            e.setAttribute('class', 'result');
            e.setAttribute('id', 'fail');
            e.textContent = test.result;
            data[name].status.textContent = 'Status: FAIL';
            data[name].status.appendChild(e);
        } else {
            data[name].status.textContent = 'Status: PASS';
        }
    }
}

document.getElementById('result').textContent = 'Result: ' + total + ' tests, ' + failures + ' failure(s).';
</script>
</body>
</html>
